import sqlite3
import os
import numpy as np
from datetime import datetime, timedelta

context_by_article = {}

def average(values):
    cleaned = [v for v in values if v is not None]
    return round(sum(cleaned) / len(cleaned), 2) if cleaned else 0

def calculate_correlation(x, y):
    x, y = list(x), list(y)
    min_len = min(len(x), len(y))
    x, y = x[:min_len], y[:min_len]
    if len(x) >= 2 and len(y) >= 2:
        return round(np.corrcoef(x, y)[0, 1], 2)
    return None

def init_context_data(db_path, only_article: str = None):
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    if only_article:
        articles = [only_article]
    else:
        cursor.execute("SELECT DISTINCT article FROM funnel")
        articles = [row[0] for row in cursor.fetchall()]

    for article in articles:
        context_text = f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"

        cursor.execute("""
            SELECT date, orders, price, cart_conversion, cart_to_order_conv FROM funnel
            WHERE article = ? ORDER BY date DESC LIMIT 30
        """, (article,))
        funnel_data = cursor.fetchall()

        cursor.execute("""
            SELECT date, shows, baskets, ctr FROM ads
            WHERE article = ? ORDER BY date DESC LIMIT 30
        """, (article,))
        ads_data = cursor.fetchall()

        cursor.execute("""
            SELECT date, search_query, open_card FROM positions
            WHERE article = ? ORDER BY date DESC LIMIT 30 * 10
        """, (article,))
        positions_data = cursor.fetchall()

        if len(funnel_data) < 3:
            continue

        def extract_column(data, index):
            return [row[index] for row in data if row[index] is not None]

        orders = extract_column(funnel_data, 1)
        prices = extract_column(funnel_data, 2)
        cart_conv = extract_column(funnel_data, 3)
        cart_to_order_conv = extract_column(funnel_data, 4)

        shows = extract_column(ads_data, 1)
        baskets = extract_column(ads_data, 2)
        ctr = extract_column(ads_data, 3)

        for period in [3, 7, 14, 30]:
            context_text += f"\nüìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ {period} –¥–Ω–µ–π:\n"
            context_text += f"- –ó–∞–∫–∞–∑—ã: {average(orders[:period])}\n"
            context_text += f"- –¶–µ–Ω–∞: {average(prices[:period])}\n"
            context_text += f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {average(cart_conv[:period])}\n"
            context_text += f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑: {average(cart_to_order_conv[:period])}\n"
            context_text += f"- –ü–æ–∫–∞–∑—ã –≤ —Ä–µ–∫–ª–∞–º–µ: {average(shows[:period])}\n"
            context_text += f"- –ö–æ—Ä–∑–∏–Ω—ã –∏–∑ —Ä–µ–∫–ª–∞–º—ã: {average(baskets[:period])}\n"
            context_text += f"- CTR: {average(ctr[:period])}\n"

        context_text += "\nüìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–∑–∞ 30 –¥–Ω–µ–π):\n"
        context_text += f"- –¶–µ–Ω–∞ ‚Üí –ó–∞–∫–∞–∑—ã: {calculate_correlation(prices, orders)}\n"
        context_text += f"- –ü–æ–∫–∞–∑—ã ‚Üí –ó–∞–∫–∞–∑—ã: {calculate_correlation(shows, orders)}\n"
        context_text += f"- CTR ‚Üí –ó–∞–∫–∞–∑—ã: {calculate_correlation(ctr, orders)}\n"
        context_text += f"- –ö–æ—Ä–∑–∏–Ω—ã –∏–∑ —Ä–µ–∫–ª–∞–º—ã ‚Üí –ó–∞–∫–∞–∑—ã: {calculate_correlation(baskets, orders)}\n"
        context_text += f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Üí –ó–∞–∫–∞–∑—ã: {calculate_correlation(cart_conv, orders)}\n"
        context_text += f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑ ‚Üí –ó–∞–∫–∞–∑—ã: {calculate_correlation(cart_to_order_conv, orders)}\n"

        # –¢–æ–ø –∫–ª—é—á–∏ –ø–æ open_card (30 –¥–Ω–µ–π)
        key_stats = {}
        for date, query, open_card in positions_data:
            if open_card is not None:
                key_stats[query] = key_stats.get(query, 0) + open_card

        top_queries = [q for q, oc_sum in key_stats.items() if oc_sum > 100]

        if top_queries:
            context_text += "\nüîç –ö–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å >100 –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏:\n"
            for q in top_queries:
                daily_opens = [row[2] for row in positions_data if row[1] == q and row[2] is not None]
                context_text += f"- {q}: —Å—Ä–µ–¥–Ω. –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å = {average(daily_opens)}\n"

        os.makedirs("context_texts", exist_ok=True)
        path = f"context_texts/{article}.txt"
        with open(path, "w", encoding="utf-8") as f:
            f.write(context_text)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")

        context_by_article[str(article)] = context_text

    conn.close()
    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"üî¢ –í—Å–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ context_by_article: {len(context_by_article)}")
    print(f"üì¶ –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {list(context_by_article.keys())[:2]}")