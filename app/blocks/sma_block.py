import pandas as pd
import sqlite3
import plotly.graph_objects as go
from fastapi.responses import HTMLResponse

def analyze_sma(db_path, article):
    try:
        conn = sqlite3.connect(db_path)
        query = f"SELECT date, orders, cart_add FROM funnel WHERE article = '{article}'"
        df = pd.read_sql(query, conn)
        conn.close()

        if df.empty:
            return HTMLResponse("<h2>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</h2>", status_code=200)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        df['date'] = pd.to_datetime(df['date'])
        df = df.sort_values('date')

        # –†–∞—Å—á—ë—Ç –ø—Ä–∏—Ä–æ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 7 –¥–Ω–µ–π
        last_7 = df[df['date'] >= df['date'].max() - pd.Timedelta(days=6)]['orders'].sum()
        prev_7 = df[(df['date'] < df['date'].max() - pd.Timedelta(days=6))
                    & (df['date'] >= df['date'].max() - pd.Timedelta(days=13))]['orders'].sum()
        if pd.isna(prev_7) or prev_7 == 0:
            growth = float('inf')
        else:
            growth = (last_7 - prev_7) / prev_7 * 100
        growth_str = f"{growth:.1f}%" if growth != float('inf') else "‚àû"

        # –†–∞—Å—á—ë—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        corr = df['orders'].corr(df['cart_add'])
        corr_str = f"{corr:.2f}" if not pd.isna(corr) else "‚Äì"

        summary_html = f"""
        <h3>üìÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤</h3>
        <ul>
          <li>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: <b>{int(last_7)}</b> –∑–∞–∫–∞–∑–æ–≤</li>
          <li>–ù–µ–¥–µ–ª–µ–π —Ä–∞–Ω–µ–µ: <b>{int(prev_7)}</b> –∑–∞–∫–∞–∑–æ–≤</li>
          <li>üìä –ü—Ä–∏—Ä–æ—Å—Ç: <b>{growth_str}</b></li>
        </ul>
        <p>üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: <b>{corr_str}</b></p>
        """

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ Plotly
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df['date'], y=df['orders'],
            mode='lines+markers', name='–ü—Ä–æ–¥–∞–∂–∏', line=dict(color='red')
        ))
        fig.add_trace(go.Scatter(
            x=df['date'], y=df['cart_add'],
            mode='lines+markers', name='–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É', line=dict(color='orange'), yaxis='y2'
        ))

        fig.update_layout(
            xaxis_title="–î–∞—Ç–∞",
            yaxis=dict(
                title_text="–ü—Ä–æ–¥–∞–∂–∏",
                title_font_color="red",
                tickfont_color="red"
            ),
            yaxis2=dict(
                title_text="–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É",
                title_font_color="orange",
                tickfont_color="orange",
                overlaying="y",
                side="right"
            ),
            hovermode="x unified",
            legend=dict(x=0.01, y=0.99)
        )

        html = summary_html + fig.to_html(full_html=False, include_plotlyjs='cdn')
        return HTMLResponse(content=html)

    except Exception as e:
        return HTMLResponse(content=f"<h2>–û—à–∏–±–∫–∞: {str(e)}</h2>", status_code=500)