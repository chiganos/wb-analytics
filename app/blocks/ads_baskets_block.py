
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
from sklearn.linear_model import LinearRegression

def analyze_ads_baskets(db_path: str, article: int) -> str:
    article = int(article)

    conn = sqlite3.connect(db_path)
    ads = pd.read_sql_query("SELECT * FROM ads", conn)
    funnel = pd.read_sql_query("SELECT * FROM funnel", conn)
    conn.close()

    ads['date'] = pd.to_datetime(ads['date'])
    funnel['date'] = pd.to_datetime(funnel['date'])

    df_ads = ads[ads['article'].astype(str) == str(article)]
    df_funnel = funnel[funnel['article'].astype(str) == str(article)]
    df = df_ads.merge(df_funnel, on=['article', 'date'], how='inner')

    if df.empty:
        return "<p>‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ article –∏ date.</p>"

    df['shows'] = pd.to_numeric(df['shows'], errors='coerce')
    df = df[df['shows'] > 200]

    if 'shows' not in df or 'baskets' not in df or 'cart_add' not in df:
        return "<p>‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏.</p>"

    if len(df) < 3:
        return f"<p>‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–¥–Ω–µ–π —Å –ø–æ–∫–∞–∑–∞–º–∏ > 200): {len(df)}</p>"

    corr = df['baskets'].corr(df['cart_add'])

    X = df[['baskets']].values
    y = df['cart_add'].values
    model = LinearRegression().fit(X, y)
    line = model.predict(X)

    fig, ax = plt.subplots(figsize=(7, 5))
    ax.scatter(df['baskets'], df['cart_add'], alpha=0.6, label='–î–∞–Ω–Ω—ã–µ')
    ax.plot(df['baskets'], line, color='red', label='–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è')
    ax.set_title(f'–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è baskets ‚Üí cart_add\n–ê—Ä—Ç–∏–∫—É–ª {article}, r = {corr:.2f}')
    ax.set_xlabel("–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ä–µ–∫–ª–∞–º–µ (baskets)")
    ax.set_ylabel("–û–±—â–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (cart_add)")
    ax.legend()
    ax.grid(True)
    fig.tight_layout()

    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    plt.close(fig)
    img_data = base64.b64encode(buf.getvalue()).decode('utf-8')
    img_tag = f'<img src="data:image/png;base64,{img_data}" style="max-width:100%;">'

    if corr > 0.6:
        msg = "‚úÖ –°–∏–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å ‚Äî —Ä–µ–∫–ª–∞–º–∞ —Å–∏–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
    elif corr > 0.3:
        msg = "‚ûï –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å ‚Äî —Ä–µ–∫–ª–∞–º–∞ –≤–ª–∏—è–µ—Ç, –Ω–æ –Ω–µ —Ä–µ—à–∞—é—â–∏–π —Ñ–∞–∫—Ç–æ—Ä"
    elif corr > 0:
        msg = "‚ö†Ô∏è –°–ª–∞–±–∞—è —Å–≤—è–∑—å ‚Äî –≤–ª–∏—è–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ —Å–ª–∞–±–æ–µ"
    else:
        msg = "‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ –∏–ª–∏ –æ–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"

    html_output = (
        f"<h3>üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º—ã: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–±—â–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ä–µ–∫–ª–∞–º–µ ‚Üí cart_add</h3>"
        f"<p><b>üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:</b> {corr:.2f}</p>"
        f"<p>{msg}</p>"
        f"<p>–î–Ω–µ–π —Å –ø–æ–∫–∞–∑–∞–º–∏ &gt; 200: {len(df)}</p>"
        f"{img_tag}"
    )

    return html_output
