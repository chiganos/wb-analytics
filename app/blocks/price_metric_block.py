import pandas as pd
import numpy as np
import sqlite3

def render_price_metric_block(article_id: int, db_path: str) -> str:
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn = sqlite3.connect(db_path)

    # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    funnel_df = pd.read_sql_query(
        "SELECT date, price, orders FROM funnel WHERE article = ?", conn,
        params=(article_id,)
    )
    calc_df = pd.read_sql_query(
        "SELECT date, profit_per_order, roi AS roi_nominal, margin_percent, CPM FROM calculated WHERE article = ?", conn,
        params=(article_id,)
    )
    ads_df = pd.read_sql_query(
        "SELECT date, cost FROM ads WHERE article = ?", conn,
        params=(article_id,)
    )
    upload_df = pd.read_sql_query(
        "SELECT stock, cost_price, avg_buyout_percent FROM upload WHERE article = ?", conn,
        params=(article_id,)
    )
    stock_wb_df = pd.read_sql_query(
        "SELECT stocks_wb FROM funnel WHERE article = ? ORDER BY date DESC LIMIT 1", conn,
        params=(article_id,)
    )
    conn.close()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ –¥–∞—Ç–µ
    df = funnel_df.merge(calc_df, on='date', how='left')
    df = df.merge(ads_df.groupby('date', as_index=False)['cost'].mean(), on='date', how='left')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ buyout
    wb_stock = int(stock_wb_df.iloc[0,0]) if not stock_wb_df.empty else 0
    up_stock = int(upload_df.iloc[0]['stock']) if not upload_df.empty else 0
    cost_price = float(upload_df.iloc[0]['cost_price']) if not upload_df.empty else 0.0
    buyout_pct = float(upload_df.iloc[0]['avg_buyout_percent']) if not upload_df.empty else 0.0
    total_stock = wb_stock + up_stock

    # –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω
    bins = list(range(int(df['price'].min()), int(df['price'].max())+100, 100))
    df['–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'] = (
        pd.cut(df['price'], bins=bins, right=False)
          .astype(str).str.replace(r"\[|\]|\(|\)", "", regex=True)
          .str.replace(", ", "‚Äì") + ' ‚ÇΩ'
    )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
    grouped = df.groupby('–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω', as_index=False).agg(
        –°—Ä–µ–¥–Ω—è—è_–ø—Ä–∏–±—ã–ª—å_—Å_–∑–∞–∫–∞–∑–∞=('profit_per_order','mean'),
        –°—Ä–µ–¥–Ω–∏–µ_–∑–∞–∫–∞–∑—ã_–≤_–¥–µ–Ω—å=('orders','mean'),
        –°—Ä–µ–¥–Ω–∏–π_—Ä–∞—Å—Ö–æ–¥_—Ä–µ–∫–ª–∞–º—ã_–≤_–¥–µ–Ω—å=('cost','mean'),
        CPM=('CPM','mean'),
        –ú–∞—Ä–∂–∞=('margin_percent','mean'),
        ROI_nominal=('roi_nominal','mean'),
        –î–Ω–µ–π_–≤_–¥–∏–∞–ø–∞–∑–æ–Ω–µ=('date','count')
    )
    grouped.rename(columns={
        '–°—Ä–µ–¥–Ω—è—è_–ø—Ä–∏–±—ã–ª—å_—Å_–∑–∞–∫–∞–∑–∞':'–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞',
        '–°—Ä–µ–¥–Ω–∏–µ_–∑–∞–∫–∞–∑—ã_–≤_–¥–µ–Ω—å':'–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å',
        '–°—Ä–µ–¥–Ω–∏–π_—Ä–∞—Å—Ö–æ–¥_—Ä–µ–∫–ª–∞–º—ã_–≤_–¥–µ–Ω—å':'–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å',
        'ROI_nominal':'ROI –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π',
        '–î–Ω–µ–π_–≤_–¥–∏–∞–ø–∞–∑–æ–Ω–µ':'–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'
    }, inplace=True)

    # –û—á–∏—â–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    grouped = grouped[~grouped['–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'].str.contains('nan')].reset_index(drop=True)
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å –º–∏–Ω–∏–º—É–º 3 –¥–Ω—è
    grouped = grouped[grouped['–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'] >= 3].reset_index(drop=True)

    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    fmt1 = lambda x: round(x,1)
    for c in ['–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞','–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å','–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å','CPM','–ú–∞—Ä–∂–∞','ROI –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π']:
        grouped[c] = grouped[c].apply(fmt1)

    # –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'] = (grouped['–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å'] * buyout_pct).round(1)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    grouped.insert(grouped.columns.get_loc('–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ')+1,'–û—Å—Ç–∞—Ç–æ–∫ (–≤–±+—Å–∫–ª–∞–¥)',total_stock)

    # –î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏
    ds = (total_stock/ grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'].replace(0,np.nan)).replace([np.inf,-np.inf],np.nan)
    grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'] = ds.round().fillna(0).astype(int)

    # –î–∞–ª—å–Ω–µ–π—à–∏–µ —Ä–∞—Å—á—ë—Ç—ã
    grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ'] = (grouped['–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞']*grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å']*grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']).round().astype(int)
    grouped['–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏)'] = (grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ']/((1+0.20)**(grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']/365))).round().astype(int)
    grouped['–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è'] = ((grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']/2)*total_stock*0.5).round().astype(int)
    grouped['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (- –∏–Ω—Ñ–ª—è—Ü–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)'] = (grouped['–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏)']-grouped['–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è']).round().astype(int)
    grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å'] = (grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ']/grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'].replace(0,np.nan)).round().fillna(0).astype(int)
    inv = total_stock*cost_price
    grouped['ROI —á–∏—Å—Ç–∞—è (%)'] = (grouped['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (- –∏–Ω—Ñ–ª—è—Ü–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)']/inv*100).round(1)
        # –ï–¥–∏–Ω–∞—è –≥–æ–¥–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞—É–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É
    grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'] = (
        (1 + grouped['ROI —á–∏—Å—Ç–∞—è (%)'] / 100) ** (365 / grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']) - 1
    ) * 100
    grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'] = grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'].round(1)

    # –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–æ–∫: –ø–µ—Ä–µ–Ω–æ—Å–∏–º ¬´–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å¬ª –ø–µ—Ä–µ–¥ ¬´–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ¬ª
    best = grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'].idxmax()
    styler = grouped.style.format({c:'{:.1f}' for c in grouped.select_dtypes(float).columns}).apply(lambda row:['background-color:#d9f2d9' if row.name==best else '' for _ in row],axis=1)

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    style = '''<style>
    .price-metric-block{border:1px solid #e0e0e0;border-radius:6px;padding:12px;background:#fff;font-size:12px;max-width:100%;overflow-x:auto;} #e0e0e0;border-radius:6px;padding:12px;background:#fff;font-size:12px;}
    .price-metric-block table.dataframe{width:100%;border-collapse:collapse;font-family:sans-serif;font-size:12px;}
    .price-metric-block th{background:#f0f0f0;font-weight:bold;text-align:center;padding:4px;border:1px solid #ccc;}
    .price-metric-block td{padding:4px;text-align:center;border:1px solid #e0e0e0;}
    .price-metric-block tbody tr:nth-child(even){background:#fafafa;}
    .price-metric-block thead th:first-child,.price-metric-block tbody th{display:none;}
    </style>'''
    header="<h3 style='font-family:sans-serif;'>üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —Ü–µ–Ω</h3>"
    return style+f"<div class='price-metric-block'>{header}"+styler.to_html()+"</div>"
