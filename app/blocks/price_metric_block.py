import pandas as pd
import numpy as np
import sqlite3

def render_price_metric_block(article_id: int, db_path: str) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ HTML-–±–ª–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.
    –í—ã–≤–æ–¥–∏—Ç –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã: –ø–µ—Ä–≤–∞—è ‚Äî —Ç–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–Ω–∏ (shows > 200), –≤—Ç–æ—Ä–∞—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–Ω–∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã (shows <= 200).
    :param article_id: ID –∞—Ä—Ç–∏–∫—É–ª–∞
    :param db_path: –ø—É—Ç—å –∫ sqlite-–±–∞–∑–µ wb.db
    :return: HTML-–±–ª–æ–∫ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    funnel_df = pd.read_sql_query(
        "SELECT date, price, orders, stocks_wb FROM funnel WHERE article = ?", conn,
        params=(article_id,)
    )
    calc_df = pd.read_sql_query(
        "SELECT date, profit_per_order, roi AS roi_nominal, margin_percent, CPM FROM calculated WHERE article = ?", conn,
        params=(article_id,)
    )
    ads_df = pd.read_sql_query(
        "SELECT date, cost, shows FROM ads WHERE article = ?", conn,
        params=(article_id,)
    )
    upload_df = pd.read_sql_query(
        "SELECT stock, cost_price, avg_buyout_percent FROM upload WHERE article = ?", conn,
        params=(article_id,)
    )
    conn.close()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—â–µ–≥–æ DataFrame
    df = funnel_df.merge(calc_df, on='date', how='left')
    df = df.merge(
        ads_df.groupby('date', as_index=False)['cost'].mean(),
        on='date', how='left'
    )
    shows_df = ads_df.groupby('date', as_index=False)['shows'].sum()
    df = df.merge(shows_df, on='date', how='left').fillna({'shows': 0})

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–ª–∞–¥–∞ –∏ —Ü–µ–Ω—ã
    wb_stock = int(funnel_df['stocks_wb'].iloc[-1]) if not funnel_df.empty else 0
    up_stock = int(upload_df.loc[0, 'stock']) if not upload_df.empty else 0
    cost_price = float(upload_df.loc[0, 'cost_price']) if not upload_df.empty else 0.0
    buyout_pct = float(upload_df.loc[0, 'avg_buyout_percent']) if not upload_df.empty else 0.0
    total_stock = wb_stock + up_stock

    def build_group(df_subset):
        # –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
        if df_subset.empty:
            cols = [
                '–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω','–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞','–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å',
                '–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å','CPM','–ú–∞—Ä–∂–∞','ROI –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π',
                '–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ','–û—Å—Ç–∞—Ç–æ–∫ (–≤–±+—Å–∫–ª–∞–¥)','–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å',
                '–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏','–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ',
                '–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏)','ROI —á–∏—Å—Ç–∞—è (%)',
                '–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'
            ]
            return pd.DataFrame(columns=cols)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        bins = list(range(int(df_subset['price'].min()), int(df_subset['price'].max()) + 100, 100))
        df_subset = df_subset.copy()
        df_subset['–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'] = (
            pd.cut(df_subset['price'], bins=bins, right=False)
              .astype(str)
              .str.replace(r"\[|\]|\(|\)", "", regex=True)
              .str.replace(", ", "‚Äì") + ' ‚ÇΩ'
        )
        grouped = df_subset.groupby('–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω', as_index=False).agg(
            –°—Ä–µ–¥–Ω—è—è_–ø—Ä–∏–±—ã–ª—å_—Å_–∑–∞–∫–∞–∑–∞=('profit_per_order', 'mean'),
            –°—Ä–µ–¥–Ω–∏–µ_–∑–∞–∫–∞–∑—ã_–≤_–¥–µ–Ω—å=('orders', 'mean'),
            –°—Ä–µ–¥–Ω–∏–π_—Ä–∞—Å—Ö–æ–¥_—Ä–µ–∫–ª–∞–º—ã_–≤_–¥–µ–Ω—å=('cost', 'mean'),
            CPM=('CPM', 'mean'),
            –ú–∞—Ä–∂–∞=('margin_percent', 'mean'),
            ROI_nominal=('roi_nominal', 'mean'),
            –î–Ω–µ–π_–≤_–¥–∏–∞–ø–∞–∑–æ–Ω–µ=('date', 'count')
        )
        grouped.rename(columns={
            '–°—Ä–µ–¥–Ω—è—è_–ø—Ä–∏–±—ã–ª—å_—Å_–∑–∞–∫–∞–∑–∞': '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞',
            '–°—Ä–µ–¥–Ω–∏–µ_–∑–∞–∫–∞–∑—ã_–≤_–¥–µ–Ω—å': '–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å',
            '–°—Ä–µ–¥–Ω–∏–π_—Ä–∞—Å—Ö–æ–¥_—Ä–µ–∫–ª–∞–º—ã_–≤_–¥–µ–Ω—å': '–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å',
            'ROI_nominal': 'ROI –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π',
            '–î–Ω–µ–π_–≤_–¥–∏–∞–ø–∞–∑–æ–Ω–µ': '–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'
        }, inplace=True)
        grouped = grouped[~grouped['–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'].str.contains('nan')]
        grouped = grouped[grouped['–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'] >= 3].reset_index(drop=True)

        # –û–±—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'] = grouped['–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å'] * buyout_pct
        grouped.insert(grouped.columns.get_loc('–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ') + 1,
                       '–û—Å—Ç–∞—Ç–æ–∫ (–≤–±+—Å–∫–ª–∞–¥)', total_stock)
        grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'] = (
            total_stock / grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'].replace(0, np.nan)
        ).fillna(0)
        grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ'] = (
            grouped['–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞'] * grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'] * grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']
        )
        grouped['–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏)'] = (
            grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ'] / ((1 + 0.20) ** (grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'] / 365))
        )
        inv = total_stock * cost_price
        grouped['ROI —á–∏—Å—Ç–∞—è (%)'] = grouped['–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏)'] / inv * 100
        grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'] = (
            (1 + grouped['ROI —á–∏—Å—Ç–∞—è (%)'] / 100) ** (365 / grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']) - 1
        ) * 100

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        one_decimal = [
            '–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å', '–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å', '–ú–∞—Ä–∂–∞', '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'
        ]
        # –û–∫—Ä—É–≥–ª—è–µ–º —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º
        for col in one_decimal:
            grouped[col] = grouped[col].round(1)
        # –û–∫—Ä—É–≥–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int, –∑–∞–ø–æ–ª–Ω—è—è NaN –Ω—É–ª—è–º–∏
        numeric_cols = grouped.select_dtypes(include=[np.number]).columns
        for col in numeric_cols:
            if col not in one_decimal and col != '–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ':
                grouped[col] = grouped[col].round(0).fillna(0).astype(int)
        # –ü—Ä–∏–≤–æ–¥–∏–º '–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ' –∫ int
        grouped['–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'] = grouped['–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'].round(0).fillna(0).astype(int)

        return grouped

    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–Ω–µ–π
    grouped_ads = build_group(df[df['shows'] > 200])
    grouped_no_ads = build_group(df[df['shows'] <= 200])

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    style_fmt = {col: '{:.1f}' for col in ['–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å', '–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å', '–ú–∞—Ä–∂–∞', '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å']}
    html_ads = (
        grouped_ads.style.format(style_fmt).to_html() if not grouped_ads.empty
        else "<p style='font-family:sans-serif;'>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–Ω–∏</p>"
    )
    html_no_ads = (
        grouped_no_ads.style.format(style_fmt).to_html() if not grouped_no_ads.empty
        else "<p style='font-family:sans-serif;'>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–Ω–∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã</p>"
    )

    # –ò—Ç–æ–≥–æ–≤—ã–π HTML
    style = '''<style>
    .price-metric-block{border:1px solid #e0e0e0;border-radius:6px;padding:12px;background:#fff;font-size:12px;max-width:100%;overflow-x:auto;}
    .price-metric-block table{width:100%;border-collapse:collapse;font-family:sans-serif;font-size:12px;}
    .price-metric-block th{background:#f0f0f0;font-weight:bold;text-align:center;padding:4px;border:1px solid #ccc;}
    .price-metric-block td{padding:4px;text-align:center;border:1px solid #e0e0e0;}
    .price-metric-block tbody tr:nth-child(even){background:#fafafa;}
    .price-metric-block thead th:first-child,.price-metric-block tbody th{display:none;}
    </style>'''
    header1 = "<h3 style='font-family:sans-serif;'>üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —Ü–µ–Ω ‚Äî —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–Ω–∏</h3>"
    header2 = "<h3 style='font-family:sans-serif;'>üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —Ü–µ–Ω ‚Äî –¥–Ω–∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã</h3>"

    return (
        style +
        f"<div class='price-metric-block'>{header1}" + html_ads +
        header2 + html_no_ads +
        "</div>"
    )
