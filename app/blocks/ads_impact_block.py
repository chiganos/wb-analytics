import sqlite3
import pandas as pd
import plotly.graph_objects as go
from fastapi.responses import HTMLResponse

def analyze_ads_impact(db_path: str, article: int) -> str:
    try:
        article = str(article).strip().replace("'", "")
        conn = sqlite3.connect(db_path)
        ads = pd.read_sql(f"SELECT date, orders FROM ads WHERE article = '{article}'", conn)
        funnel = pd.read_sql(f"SELECT date, orders FROM funnel WHERE article = '{article}'", conn)
        conn.close()

        if ads.empty or funnel.empty:
            return HTMLResponse("<p>‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.</p>", status_code=200)

        ads["date"] = pd.to_datetime(ads["date"])
        funnel["date"] = pd.to_datetime(funnel["date"])

        df = pd.merge(funnel, ads, on="date", how="outer", suffixes=("_total", "_ads"))
        df["orders_total"] = pd.to_numeric(df["orders_total"], errors="coerce").fillna(0)
        df["orders_ads"] = pd.to_numeric(df["orders_ads"], errors="coerce").fillna(0)
        df = df.dropna(subset=["date"])
        df = df.sort_values("date")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        with_ads = df[df["orders_ads"] > 0]
        without_ads = df[df["orders_ads"] == 0]

        avg_with = round(with_ads["orders_total"].mean(), 2) if not with_ads.empty else 0.0
        avg_without = round(without_ads["orders_total"].mean(), 2) if not without_ads.empty else 0.0

        total_days = len(df)
        days_with_ads = len(with_ads)
        days_without_ads = len(without_ads)

        corr = round(df["orders_ads"].corr(df["orders_total"]), 2)

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if days_with_ads < 3:
            effect_text = "‚ö†Ô∏è <b>–ú–∞–ª–æ –¥–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º–æ–π ‚Äî –≤—ã–≤–æ–¥—ã —É—Å–ª–æ–≤–Ω—ã.</b>"
        elif avg_with > avg_without * 1.5:
            effect_text = "‚úÖ <b>–†–µ–∫–ª–∞–º–∞ –∑–∞–º–µ—Ç–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏.</b>"
        elif avg_with > avg_without * 1.1:
            effect_text = "‚ûï <b>–†–µ–∫–ª–∞–º–∞ –¥–∞—ë—Ç —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç.</b>"
        else:
            effect_text = "‚ùå <b>–†–µ–∫–ª–∞–º–∞ –ø–æ—á—Ç–∏ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏.</b>"

        # –ì—Ä–∞—Ñ–∏–∫
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df["date"], y=df["orders_total"],
            name="–û–±—â–∏–µ –∑–∞–∫–∞–∑—ã", mode="lines+markers", line=dict(color="blue")
        ))
        fig.add_trace(go.Scatter(
            x=df["date"], y=df["orders_ads"],
            name="–†–µ–∫–ª–∞–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã", mode="lines+markers", line=dict(color="green")
        ))

        fig.update_layout(
            title="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏ –æ–±—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
            height=400
        )

        html = f"""
        <h3>üì¢ –í–ª–∏—è–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—â–∏–µ</h3>
        <p>
            üì¶ –í—Å–µ–≥–æ –¥–Ω–µ–π: <b>{total_days}</b><br>
            üì£ –° —Ä–µ–∫–ª–∞–º–æ–π: <b>{days_with_ads}</b>, üö´ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã: <b>{days_without_ads}</b><br>
            üìà –°—Ä. –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã: <b>{avg_without}</b><br>
            üìä –°—Ä. –∑–∞–∫–∞–∑—ã —Å —Ä–µ–∫–ª–∞–º–æ–π: <b>{avg_with}</b><br>
            üìâ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –∏ –æ–±—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏: <b>{corr}</b><br>
            {effect_text}
        </p>
        {fig.to_html(include_plotlyjs='cdn', full_html=False)}
        """

        return HTMLResponse(html, status_code=200)

    except Exception as e:
        return HTMLResponse(f"<p>‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}</p>", status_code=500)
