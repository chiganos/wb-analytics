import pandas as pd
import numpy as np
import sqlite3

def render_price_metric_block(article_id: int, db_path: str) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ HTML-–±–ª–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.
    :param article_id: ID –∞—Ä—Ç–∏–∫—É–ª–∞
    :param db_path: –ø—É—Ç—å –∫ sqlite-–±–∞–∑–µ wb.db
    :return: HTML-–±–ª–æ–∫ —Å —Ç–∞–±–ª–∏—Ü–µ–π –º–µ—Ç—Ä–∏–∫
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –±–∞–∑–æ–π
    conn = sqlite3.connect(db_path)

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü
    funnel_df = pd.read_sql_query(
        "SELECT date, price, orders, stocks_wb FROM funnel WHERE article = ?", conn,
        params=(article_id,)
    )
    calc_df = pd.read_sql_query(
        "SELECT date, profit_per_order, roi AS roi_nominal, margin_percent, CPM FROM calculated WHERE article = ?", conn,
        params=(article_id,)
    )
    ads_df = pd.read_sql_query(
        "SELECT date, cost, shows FROM ads WHERE article = ?", conn,
        params=(article_id,)
    )
    upload_df = pd.read_sql_query(
        "SELECT stock, cost_price, avg_buyout_percent FROM upload WHERE article = ?", conn,
        params=(article_id,)
    )
    conn.close()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ –¥–∞—Ç–µ
    df = funnel_df.merge(calc_df, on='date', how='left')
    df = df.merge(
        ads_df.groupby('date', as_index=False)['cost'].mean(),
        on='date', how='left'
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–Ω–µ–π
    shows_df = ads_df.groupby('date', as_index=False)['shows'].sum()
    df = df.merge(shows_df, on='date', how='left').fillna({'shows': 0})

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–ª–∞–¥–∞
    wb_stock = int(funnel_df['stocks_wb'].iloc[-1]) if not funnel_df.empty else 0
    up_stock = int(upload_df.iloc[0]['stock']) if not upload_df.empty else 0
    cost_price = float(upload_df.iloc[0]['cost_price']) if not upload_df.empty else 0.0
    buyout_pct = float(upload_df.iloc[0]['avg_buyout_percent']) if not upload_df.empty else 0.0
    total_stock = wb_stock + up_stock

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    bins = list(range(int(df['price'].min()), int(df['price'].max()) + 100, 100))
    df['–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'] = (
        pd.cut(df['price'], bins=bins, right=False)
          .astype(str)
          .str.replace(r"\[|\]|\(|\)", "", regex=True)
          .str.replace(", ", "‚Äì") + ' ‚ÇΩ'
    )

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
    grouped = df.groupby('–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω', as_index=False).agg(
        –°—Ä–µ–¥–Ω—è—è_–ø—Ä–∏–±—ã–ª—å_—Å_–∑–∞–∫–∞–∑–∞=('profit_per_order', 'mean'),
        –°—Ä–µ–¥–Ω–∏–µ_–∑–∞–∫–∞–∑—ã_–≤_–¥–µ–Ω—å=('orders', 'mean'),
        –°—Ä–µ–¥–Ω–∏–π_—Ä–∞—Å—Ö–æ–¥_—Ä–µ–∫–ª–∞–º—ã_–≤_–¥–µ–Ω—å=('cost', 'mean'),
        CPM=('CPM', 'mean'),
        –ú–∞—Ä–∂–∞=('margin_percent', 'mean'),
        ROI_nominal=('roi_nominal', 'mean'),
        –î–Ω–µ–π_–≤_–¥–∏–∞–ø–∞–∑–æ–Ω–µ=('date', 'count')
    )
    grouped.rename(columns={
        '–°—Ä–µ–¥–Ω—è—è_–ø—Ä–∏–±—ã–ª—å_—Å_–∑–∞–∫–∞–∑–∞': '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞',
        '–°—Ä–µ–¥–Ω–∏–µ_–∑–∞–∫–∞–∑—ã_–≤_–¥–µ–Ω—å': '–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å',
        '–°—Ä–µ–¥–Ω–∏–π_—Ä–∞—Å—Ö–æ–¥_—Ä–µ–∫–ª–∞–º—ã_–≤_–¥–µ–Ω—å': '–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å',
        'ROI_nominal': 'ROI –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π',
        '–î–Ω–µ–π_–≤_–¥–∏–∞–ø–∞–∑–æ–Ω–µ': '–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'
    }, inplace=True)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
    grouped = grouped[~grouped['–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'].str.contains('nan')].reset_index(drop=True)
    grouped = grouped[grouped['–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'] >= 3].reset_index(drop=True)
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    fmt1 = lambda x: round(x, 1)
    for col in ['–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞', '–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å', '–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –≤ –¥–µ–Ω—å', 'CPM', '–ú–∞—Ä–∂–∞', 'ROI –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π']:
        grouped[col] = grouped[col].apply(fmt1)

    # –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –≤—ã–∫—É–ø–∞
    grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'] = (grouped['–°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å'] * buyout_pct).round(1)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–Ω–µ–π (shows > 200)
    ad_days = df[df['shows'] > 200].groupby('–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω')['date'].nunique()
    grouped.insert(
        grouped.columns.get_loc('–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ') + 1,
        '–†–µ–∫–ª–∞–º–Ω—ã—Ö –¥–Ω–µ–π',
        grouped['–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'].map(ad_days).fillna(0).astype(int)
    )

    # –û—Å—Ç–∞—Ç–æ–∫ –∏ –¥–Ω–∏ –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏
    grouped.insert(
        grouped.columns.get_loc('–î–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ') + 2,
        '–û—Å—Ç–∞—Ç–æ–∫ (–≤–±+—Å–∫–ª–∞–¥)',
        total_stock
    )
    ds = (total_stock / grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'].replace(0, np.nan))
    grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'] = ds.round().fillna(0).astype(int)

    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–µ–π
    grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ'] = (
        grouped['–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–∫–∞–∑–∞'] * grouped['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å'] * grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']
    ).round().astype(int)
    grouped['–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏)'] = (
        grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ'] / ((1 + 0.20) ** (grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'] / 365))
    ).round().astype(int)
    grouped['–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è'] = (
        (grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'] / 2) * total_stock * 0.5
    ).round().astype(int)
    grouped['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (- –∏–Ω—Ñ–ª—è—Ü–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)'] = (
        grouped['–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏)'] - grouped['–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è']
    ).round().astype(int)
    grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å'] = (
        grouped['–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ'] / grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏'].replace(0, np.nan)
    ).round().fillna(0).astype(int)
    inv = total_stock * cost_price
    grouped['ROI —á–∏—Å—Ç–∞—è (%)'] = (grouped['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (- –∏–Ω—Ñ–ª—è—Ü–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)'] / inv * 100).round(1)
    grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'] = (
        (1 + grouped['ROI —á–∏—Å—Ç–∞—è (%)'] / 100) ** (365 / grouped['–î–Ω–µ–π –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏']) - 1
    ) * 100
    grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'] = grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'].round(1)

    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ª—É—á—à–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    best_idx = grouped['–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'].idxmax()
    styler = grouped.style.format({c: '{:.1f}' for c in grouped.select_dtypes(float).columns}) \
        .apply(lambda row: ['background-color:#d9f2d9' if row.name == best_idx else '' for _ in row], axis=1)

    # HTML-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    style = '''<style>
    .price-metric-block{border:1px solid #e0e0e0;border-radius:6px;padding:12px;background:#fff;font-size:12px;max-width:100%;overflow-x:auto;}
    .price-metric-block table.dataframe{width:100%;border-collapse:collapse;font-family:sans-serif;font-size:12px;}
    .price-metric-block th{background:#f0f0f0;font-weight:bold;text-align:center;padding:4px;border:1px solid #ccc;}
    .price-metric-block td{padding:4px;text-align:center;border:1px solid #e0e0e0;}
    .price-metric-block tbody tr:nth-child(even){background:#fafafa;}
    .price-metric-block thead th:first-child,.price-metric-block tbody th{display:none;}
    </style>'''
    header = "<h3 style='font-family:sans-serif;'>üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —Ü–µ–Ω</h3>"
    return style + f"<div class='price-metric-block'>{header}" + styler.to_html() + "</div>"
